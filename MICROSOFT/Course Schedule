class Solution {
    public boolean canFinish(int N, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> graph= new ArrayList<>();
        //fill it with empty lists
        for(int i=0;i<N;i++){
            graph.add(new ArrayList<Integer>());
        }
        for(int i=0;i<prerequisites.length;i++){
            graph.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int[] indegree= new int[N];
        for(int i=0;i<N;i++){
            for(int j:graph.get(i)){
                indegree[j]++;
            }
        }
        Queue<Integer> q= new ArrayDeque<>();
        for(int i=0;i<N;i++){
            if(indegree[i]==0)q.add(i);
        }
        ArrayList<Integer> ans= new ArrayList<>();
        while(!q.isEmpty()){
            int front=q.remove();
            ans.add(front);
            for(int i:graph.get(front)){
                indegree[i]--;
                if(indegree[i]==0)q.add(i);
            }
        }
        
        return (ans.size()==N?true:false);

    }
}
