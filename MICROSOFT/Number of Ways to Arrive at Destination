class pair{
    int distance;
    int node;
    pair(int distance,int node){
        this.distance=distance;
        this.node=node;
    }
}

class Solution {
    
static int countPaths(int n, List<List<Integer>> roads) {
        
        
        int mod=(int)(Integer.MAX_VALUE+7);
        
        ArrayList<ArrayList<pair>> adj = new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<pair>()); // add pair later
        }
        
        for(int i=0;i<roads.size();i++){
            adj.get(roads.get(i).get(0)).add(new pair(roads.get(i).get(1),roads.get(i).get(2)));
            adj.get(roads.get(i).get(1)).add(new pair(roads.get(i).get(0),roads.get(i).get(2)));
            
        }
        
        PriorityQueue<pair> pq = new PriorityQueue<>((x,y) -> x.distance-y.distance);
        pq.add(new pair(0,0));
        
        int[] distance= new int[n];
        int[]ways= new int[n];
        for(int i=0;i<n;i++){
            distance[i]=Integer.MAX_VALUE;
            ways[i]=0;
            }
        
        
        distance[0]=0;
        ways[0]=1;
        
        while(!pq.isEmpty()){
            int dist=pq.peek().distance;
            int node=pq.peek().node;
            pq.remove();
            
            for(int i=0;i<adj.get(node).size();i++){
                int edgeWeight=adj.get(node).get(i).node;    //both lines important
                int adjNode=adj.get(node).get(i).distance;
                
                if(edgeWeight+dist<distance[adjNode]){
                    distance[adjNode]=edgeWeight+dist;
                    pq.add(new pair(distance[adjNode],adjNode));
                    ways[adjNode]=ways[node];                            //important
                }else if(edgeWeight+dist==distance[adjNode]){
                    ways[adjNode]=(ways[adjNode]+ways[node])%mod;       //important
                }
            }
        }
        
        return ways[n-1]%mod;
    }
}
