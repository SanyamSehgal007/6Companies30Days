class Solution {
    public List<Integer> largestDivisibleSubset(int[] arr) {
        int n=arr.length;
        Arrays.sort(arr);
        if(n==1){
            List<Integer> ans= new ArrayList<>();
            ans.add(arr[0]);
            return ans;
        }
        int[] dp = new int[n];
        int[] pre=new int[n];
        int index=-1;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            dp[i]=1;
            pre[i]=-1;
        }

        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(arr[i]%arr[j]==0 && dp[i]<dp[j]+1){
                    dp[i]=dp[j]+1;
                    pre[i]=j;
                }
            }
            if(dp[i]>max){
                max=dp[i];
                index=i;
            }
        }
        List<Integer> ans= new ArrayList<>();
           while(index!=-1){
               ans.add(arr[index]);
               index=pre[index];
           }
           return ans;
    }
}
